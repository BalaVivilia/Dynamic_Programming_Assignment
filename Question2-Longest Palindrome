Question:
---------
 Given a string `s`, return the longest palindromic substring in `s`.
 Input Description:
 A string `s`.
 Output Description:
 The longest palindromic substring in `s`

input: babad

output: aba or bab

__________________________________________________________________________________________________________________________________________________________________________

Program:
-------

def longestPalindrome(s):
    n=len(s)
    if(n==0):
        return ""
    
    dp=[[False]*n for _ in range(n)]
    start=0
    maxLength=1 
    
    for i in range(n):
        dp[i][i]=True
    
    for i in range(n-1):
        if(s[i]==s[i+1]):
            dp[i][i+1]=True
            start=i
            maxLength=2
            
    for length in range(3,n+1):
        for i in range(n-length+1):
            j=i+length-1
            if s[i]==s[j] and dp[i+1][j-1]:
                dp[i][j]=True
                if length>maxLength:
                    start=i
                    maxLength=length
                    
    return s[start:start+maxLength]
  

s=input()
print(longestPalindrome(s))


________________________________________________________________________________________________________________________________________________________________________
            
        
